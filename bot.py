import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token="7776292962:AAHj3yUt0Kpw54AFOP998u3VJd-E1w8KFKA")
dp = Dispatcher()

# ---- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ----
class OrderState(StatesGroup):
    name = State()
    phone = State()
    address = State()
    confirm = State()

# ---- –ú–µ–Ω—é —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ ----
products = {
    "milkshake": {"name": "Milkshake", "price": 4.00, "count": 0},
    "hell": {"name": "Hell Energy", "price": 3.00, "count": 0},
    "monster": {"name": "Monster", "price": 3.50, "count": 0},
    "juice": {"name": "ŒßœÖŒºœåœÇ", "price": 3.00, "count": 0},
    "soda": {"name": "ŒëŒΩŒ±œàœÖŒ∫œÑŒπŒ∫Œ¨", "price": 2.50, "count": 0},
    "tea": {"name": "Œ§œÉŒ¨Œπ", "price": 3.00, "count": 0},
    "ice_tea": {"name": "Ice Tea", "price": 2.50, "count": 0},
    "simple_chocolate": {"name": "Œ£ŒøŒ∫ŒøŒªŒ¨œÑŒ± Œ±œÄŒªŒÆ", "price": 3.00, "count": 0},
    "flavored_chocolate": {"name": "Œ£ŒøŒ∫ŒøŒªŒ¨œÑŒ± Œ≥ŒµœçœÉŒ∑", "price": 3.50, "count": 0},
    "viennese_chocolate": {"name": "Œ£ŒøŒ∫ŒøŒªŒ¨œÑŒ± Œ≤ŒπŒµŒΩŒøœÖŒ¨", "price": 3.50, "count": 0},
    "drosspresso": {"name": "Drosspresso", "price": 3.50, "count": 0},
    "triple_freddo": {"name": "Œ§œÅŒπœÄŒªœå freddo", "price": 3.50, "count": 0},
    "greek_coffee": {"name": "ŒïŒªŒªŒ∑ŒΩŒπŒ∫œåœÇ (ŒºŒøŒΩœåœÇ / Œ¥ŒπœÄŒªœåœÇ)", "price": 2.00, "count": 0},
    "espresso": {"name": "Espresso (ŒºŒøŒΩœå / Œ¥ŒπœÄŒªœå)", "price": 2.00, "count": 0},
    "beer": {"name": "ŒúœÄœçœÅŒµœÇ (Fischer, Sol, Corona, Breezer, Kaiser)", "price": 4.00, "count": 0},
    "wine_glass": {"name": "ŒöœÅŒ±œÉŒØ œÄŒøœÑŒÆœÅŒπ", "price": 4.00, "count": 0},
    "special_wine": {"name": "ŒöœÅŒ±œÉŒØ œÄŒøŒπŒ∫ŒπŒªŒØŒ±", "price": 5.00, "count": 0},
    "bianco_nero": {"name": "Bianco Nero", "price": 5.00, "count": 0},
    "vodka_gin_whiskey": {"name": "Vodka / Gin / ŒüœÖŒØœÉŒ∫Œπ", "price": 6.00, "count": 0},
    "dark_rum": {"name": "ŒúŒ±œçœÅŒ± œÅŒøœçŒºŒπŒ±", "price": 7.00, "count": 0},
    "special_drinks": {"name": "Special (Chivas, Dimple, Jack Daniels, Black Label, Cardhu)", "price": 8.00, "count": 0},
    "pizza": {"name": "Œ†ŒØœÑœÉŒ±", "price": 5.00, "count": 0},
    "sandwich": {"name": "Club Sandwich", "price": 5.00, "count": 0},
    "toast": {"name": "Œ§ŒøœÉœÑ", "price": 2.50, "count": 0},
    "coffee_syrup": {"name": "Œ£ŒπœÅœåœÄŒπ œÉŒµ Œ∫Œ±œÜŒ≠", "price": 0.50, "count": 0}
}

def generate_product_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ + / -"""
    buttons = []
    for key, product in products.items():
        buttons.append([
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{key}"),
            InlineKeyboardButton(text=f"{product['name']} ({product['count']})", callback_data="none"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{key}")
        ])
    buttons.append([InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")])
    buttons.append([InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ---- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order"),
     InlineKeyboardButton(text="üìú –ú–µ–Ω—é", callback_data="menu")],
    [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
])

# ---- –ö–æ–º–∞–Ω–¥–∞ /start ----
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Momento Cafe Bar! ‚òïÔ∏èüçπ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.",
        reply_markup=main_menu
    )

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõç –ó–∞–∫–∞–∑–∞—Ç—å" ----
@dp.callback_query(lambda c: c.data == "order")
async def order_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:", reply_markup=generate_product_menu())

# ---- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ----
@dp.callback_query(lambda c: c.data.startswith("increase_") or c.data.startswith("decrease_"))
async def modify_product_count(callback: types.CallbackQuery):
    action, product_key = callback.data.split("_")
    if product_key in products:
        if action == "increase":
            products[product_key]["count"] += 1
        elif action == "decrease" and products[product_key]["count"] > 0:
            products[product_key]["count"] -= 1

    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=generate_product_menu())

# ---- –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ----
@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    for key in products:
        products[key]["count"] = 0
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await callback.message.edit_reply_markup(reply_markup=generate_product_menu())

# ---- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ----
@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    total_price = sum(p["count"] * p["price"] for p in products.values())
    if total_price == 0:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç!", show_alert=True)
        return

    order_text = "üõí **–í–∞—à –∑–∞–∫–∞–∑:**\n\n"
    for product in products.values():
        if product["count"] > 0:
            order_text += f"‚Ä¢ {product['name']} x {product['count']} = {product['count'] * product['price']}‚Ç¨\n"

    order_text += f"\nüí∞ **–ò—Ç–æ–≥–æ:** {total_price}‚Ç¨\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    await callback.message.answer(order_text, parse_mode="Markdown")
    await state.set_state(OrderState.name)

# ---- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())