import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=7776292962:AAHQiJNdilk6D6_nNP07E-PfN8gDmm8rD8I)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order")],
    [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
])

# –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞
order_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚òï –ö–æ—Ñ–µ", callback_data="order_coffee"),
     InlineKeyboardButton(text="üçπ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="order_cocktails")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Momento Cafe Bar! ‚òïüçπ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõç –ó–∞–∫–∞–∑–∞—Ç—å"
@dp.callback_query(lambda c: c.data == "order")
async def order_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
        reply_markup=order_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìû –°–≤—è–∑–∞—Ç—å—Å—è"
@dp.callback_query(lambda c: c.data == "contact")
async def contact_handler(callback: types.CallbackQuery):
    contact_info = (
        "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        "üìç –ê–¥—Ä–µ—Å: Kavala, Greece\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +30 251 039 1646\n"
        "üí¨ Telegram: @momento_support"
    )
    await callback.message.answer(contact_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤
@dp.callback_query(lambda c: c.data in ["order_coffee", "order_cocktails"])
async def choose_drink(callback: types.CallbackQuery):
    drink_type = "–∫–æ—Ñ–µ" if callback.data == "order_coffee" else "–∫–æ–∫—Ç–µ–π–ª–∏"
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {drink_type}. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +30 251 039 1646"
    )

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.",
        reply_markup=main_menu
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())