import logging
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderState(StatesGroup):
    choosing_category = State()
    choosing_product = State()
    confirmation = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
    [InlineKeyboardButton(text="üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data="menu")],
    [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
])

# –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
menu_items = {
    "–ö–æ—Ñ–µ ‚òï": [("–≠—Å–ø—Ä–µ—Å—Å–æ", 2.50), ("–ê–º–µ—Ä–∏–∫–∞–Ω–æ", 3.00), ("–ö–∞–ø—É—á–∏–Ω–æ", 3.50)],
    "–ß–∞–π üçµ": [("–ß—ë—Ä–Ω—ã–π —á–∞–π", 2.00), ("–ó–µ–ª—ë–Ω—ã–π —á–∞–π", 2.00), ("–§—Ä—É–∫—Ç–æ–≤—ã–π —á–∞–π", 2.50)],
    "–ù–∞–ø–∏—Ç–∫–∏ ü•§": [("–°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π", 3.00), ("–ö–æ–∫–∞-–ö–æ–ª–∞", 2.50)]
}

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logging.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Momento Cafe Bar</b>! ‚òïüçπ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "menu")
async def show_menu(callback: types.CallbackQuery):
    menu_text = "\n\n".join([
        f"üçΩ <b>{cat}</b>\n" + "\n".join([f"‚Ä¢ {name} ‚Äî {price:.2f}‚Ç¨" for name, price in items])
        for cat, items in menu_items.items()
    ])
    await callback.message.edit_text(f"üìú <b>–ú–µ–Ω—é</b>\n\n{menu_text}", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@dp.callback_query(lambda c: c.data == "contacts")
async def show_contacts(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –ö–∞–≤–∞–ª–∞, –ì—Ä–µ—Ü–∏—è\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +30 251 039 1646\n"
        "‚úâÔ∏è <b>Telegram:</b> @momento_support",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ (–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
@dp.callback_query(lambda c: c.data == "order")
async def order_handler(callback: types.CallbackQuery, state: FSMContext):
    category_buttons = [
        [InlineKeyboardButton(text=cat, callback_data=f"category_{i}")]
        for i, cat in enumerate(menu_items.keys())
    ]
    category_menu = InlineKeyboardMarkup(inline_keyboard=category_buttons + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")]])

    await callback.message.edit_text("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_menu)
    await state.set_state(OrderState.choosing_category)

# –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith("category_"))
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    category_index = int(callback.data.split("_")[1])
    category_name = list(menu_items.keys())[category_index]
    items = menu_items[category_name]

    product_buttons = [
        [InlineKeyboardButton(text=f"{name} - {price:.2f}‚Ç¨", callback_data=f"add_{name}")]
        for name, price in items
    ]

    product_menu = InlineKeyboardMarkup(inline_keyboard=product_buttons + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order")]])
    await callback.message.edit_text(f"üõí <b>{category_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=product_menu)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    product_name = callback.data[4:]
    user_data = await state.get_data()

    order = user_data.get("order", {})
    order[product_name] = order.get(product_name, 0) + 1

    await state.update_data(order=order)
    await callback.answer(f"‚úÖ {product_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")